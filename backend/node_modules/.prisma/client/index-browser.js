
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ParqueScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  descripcion: 'descripcion',
  imagen: 'imagen',
  direccion: 'direccion',
  latitud: 'latitud',
  longitud: 'longitud',
  fechaDecreto: 'fechaDecreto',
  superficieTerrestre: 'superficieTerrestre',
  superficieMarina: 'superficieMarina',
  clicks: 'clicks'
});

exports.Prisma.EstadoScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre'
});

exports.Prisma.EstadoParqueScalarFieldEnum = makeEnum({
  parqueId: 'parqueId',
  estadoId: 'estadoId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
});

exports.Prisma.RegionScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre'
});

exports.Prisma.RegionParqueScalarFieldEnum = makeEnum({
  parqueId: 'parqueId',
  regionId: 'regionId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
});

exports.Prisma.CategoriaScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre'
});

exports.Prisma.CategoriaParqueScalarFieldEnum = makeEnum({
  parqueId: 'parqueId',
  categoriaId: 'categoriaId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
});

exports.Prisma.FloraScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  imagen: 'imagen',
  descripcion: 'descripcion'
});

exports.Prisma.FloraParqueScalarFieldEnum = makeEnum({
  parqueId: 'parqueId',
  floraId: 'floraId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
});

exports.Prisma.FaunaScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  imagen: 'imagen',
  descripcion: 'descripcion'
});

exports.Prisma.FaunaParqueScalarFieldEnum = makeEnum({
  parqueId: 'parqueId',
  faunaID: 'faunaID',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
});

exports.Prisma.ActividadScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre'
});

exports.Prisma.ActividadParqueScalarFieldEnum = makeEnum({
  parqueId: 'parqueId',
  actividadId: 'actividadId',
  assignedAt: 'assignedAt',
  assignedBy: 'assignedBy'
});

exports.Prisma.AnuncioScalarFieldEnum = makeEnum({
  id: 'id',
  titulo: 'titulo',
  descripcion: 'descripcion',
  variante: 'variante',
  parqueId: 'parqueId'
});

exports.Prisma.HorarioScalarFieldEnum = makeEnum({
  id: 'id',
  dias: 'dias',
  horaAbrir: 'horaAbrir',
  horaCerrar: 'horaCerrar',
  parqueId: 'parqueId'
});

exports.Prisma.UsuarioScalarFieldEnum = makeEnum({
  id: 'id',
  nombre: 'nombre',
  email: 'email',
  password: 'password',
  role: 'role'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Role = makeEnum({
  USER: 'USER',
  ADMIN: 'ADMIN'
});

exports.Prisma.ModelName = makeEnum({
  Parque: 'Parque',
  Estado: 'Estado',
  EstadoParque: 'EstadoParque',
  Region: 'Region',
  RegionParque: 'RegionParque',
  Categoria: 'Categoria',
  CategoriaParque: 'CategoriaParque',
  Flora: 'Flora',
  FloraParque: 'FloraParque',
  Fauna: 'Fauna',
  FaunaParque: 'FaunaParque',
  Actividad: 'Actividad',
  ActividadParque: 'ActividadParque',
  Anuncio: 'Anuncio',
  Horario: 'Horario',
  Usuario: 'Usuario'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
